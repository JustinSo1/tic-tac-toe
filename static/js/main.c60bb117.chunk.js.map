{"version":3,"sources":["constants.js","components/Square.js","components/Board.js","helpers.js","minimax.js","components/Game.js","App.js","index.js"],"names":["GAME_STATES","SCORES","1","0","2","GAME_MODES","easy","medium","difficult","marks","value","label","defaultProps","color","p","borderColor","width","height","fontSize","textAlign","Square","onClick","borderTop","borderBottom","borderRight","borderLeft","Box","Board","squares","map","row","i","display","justifyContent","key","col","j","activeSquare","length","calculateWinner","horizontalCheck","verticalCheck","out","group","push","every","element","index","arr","rows","cols","diagonalCheck","Math","min","slice","z1","getEmptySquares","grid","emptySquares","forEach","ele","isEmpty","getRandomInt","max","ceil","floor","random","switchPlayer","player","cloneGrid","makeMove","square","minimax","board","thisScore","mult","maxScore","bestMove","winner","empty","copy","Array","fill","Game","useState","human","computer","players","setPlayers","stepNumber","setStepNumber","nextMove","setNextMove","gameState","setGameState","setWinner","open","setOpen","mode","setMode","setLength","setWidth","setGrid","classes","useStyles","choosePlayer","option","move","useCallback","pastHistory","computerMove","getIndexToMove","gridCopy","valuetext","useEffect","timeout","setTimeout","clearTimeout","winnerStr","declareWinner","m","Typography","gutterBottom","Button","buttonStyle","Select","onChange","e","target","Object","keys","gameMode","id","Slider","defaultValue","getAriaValueText","aria-labelledby","step","valueLabelDisplay","onChangeCommitted","event","setLengthOfBoard","setWidthOfBoard","_step","destination","Modal","aria-describedby","className","modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","Fade","in","paper","variant","makeStyles","theme","alignItems","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c60bb117.chunk.js","sourcesContent":["export const SQUARE_DIMS = 100;\n// export const DIMS_WIDTH = Math.floor(Math.random() * 5) + 2;\n// export const DIMS_LENGTH = Math.floor(Math.random() * 5) + 2;\nexport const DIMS_WIDTH = 3;\nexport const DIMS_LENGTH = 3;\n\nexport const DRAW = 0;\nexport const PLAYER_X = 1;\nexport const PLAYER_O = 2;\nexport const GAME_STATES = {\n  notStarted: \"not_started\",\n  inProgress: \"in_progress\",\n  over: \"over\",\n};\nexport const SCORES = {\n  1: 1,\n  0: 0,\n  2: -1,\n};\nexport const GAME_MODES = {\n  easy: \"easy\",\n  medium: \"medium\",\n  difficult: \"difficult\",\n};\nexport const marks = [\n  {\n    value: 2,\n    label: \"2\",\n  },\n  {\n    value: 5,\n    label: \"5\",\n  },\n  {\n    value: 10,\n\n    label: \"10\",\n  },\n]\nexport const minSize = 2;\nexport const maxSize = 10;\n","import React from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport { SQUARE_DIMS } from \"../constants\";\nconst defaultProps = {\n  color: \"black\",\n  p: 1,\n  borderColor: \"primary\",\n  width: SQUARE_DIMS,\n  height: SQUARE_DIMS,\n  fontSize: SQUARE_DIMS,\n  textAlign: \"center\",\n};\n\nconst Square = ({\n  value,\n  onClick,\n  borderTop,\n  borderBottom,\n  borderRight,\n  borderLeft,\n}) => (\n  <Box\n    {...defaultProps}\n    onClick={onClick}\n    borderTop={borderTop}\n    borderBottom={borderBottom}\n    borderLeft={borderLeft}\n    borderRight={borderRight}\n  >\n    {value}\n  </Box>\n);\nexport default Square;\n","import React from \"react\";\nimport Square from \"./Square\";\nimport { Box } from \"@material-ui/core\";\nimport { PLAYER_X } from \"../constants\";\nconst Board = ({ squares, onClick }) => {\n  return (\n    <div>\n      {squares.map((row, i) => {\n        return (\n          <Box display=\"flex\" justifyContent=\"center\" key={i}>\n            {row.map((col, j) => {\n              let borderTop;\n              let borderLeft;\n              let borderBottom;\n              let borderRight;\n              const activeSquare = col !== null;\n              if (i === 0) {\n                borderBottom = 1;\n                if (j === 0 || j !== row.length - 1) {\n                  borderRight = 1;\n                }\n              } else if (i === squares.length - 1) {\n                if (j === 0 || j !== row.length - 1) {\n                  borderRight = 1;\n                }\n              } else {\n                borderRight = 1;\n                borderBottom = 1;\n                if (j === row.length - 1) {\n                  borderRight = 0;\n                }\n              }\n              return (\n                <Square\n                  value={activeSquare && (col === PLAYER_X ? \"X\" : \"O\")}\n                  borderLeft={borderLeft}\n                  borderBottom={borderBottom}\n                  borderTop={borderTop}\n                  borderRight={borderRight}\n                  key={(i, j)}\n                  onClick={() => onClick(i, j)}\n                />\n              );\n            })}\n          </Box>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Board;\n","import { PLAYER_O, PLAYER_X, DRAW } from \"./constants\";\r\nexport function calculateWinner(squares) {\r\n  let horizontalCheck = squares[0].length;\r\n  let verticalCheck = squares.length;\r\n\r\n  // Horizontal check\r\n  let out = [];\r\n  let group = [];\r\n  for (let row = 0; row < squares.length; ++row) {\r\n    group = [];\r\n    for (let col = 0; col < squares[0].length; ++col) {\r\n      group.push(squares[row][col]);\r\n    }\r\n    out.push(group);\r\n  }\r\n\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === horizontalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Vertical Check\r\n  out = [];\r\n  for (let col = 0; col < squares[0].length; ++col) {\r\n    group = [];\r\n    for (let row = 0; row < squares.length; ++row) {\r\n      group.push(squares[row][col]);\r\n    }\r\n    out.push(group);\r\n  }\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === verticalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Diagonal Check\r\n  // # of rows\r\n  let rows = squares.length;\r\n  // # of cols\r\n  let cols = squares[0].length;\r\n\r\n  let diagonalCheck = Math.min(rows, cols);\r\n\r\n  out = [];\r\n  for (let i = 1 - rows; i < cols; i++) {\r\n    group = [];\r\n    for (let j = 0; j < rows; j++) {\r\n      if (i + j >= 0 && i + j < cols) {\r\n        group.push(squares[j][i + j]);\r\n      }\r\n    }\r\n    out.push(group);\r\n  }\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === diagonalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reverse Diagonal check\r\n  rows = squares.length;\r\n  cols = squares[0].length;\r\n  out = [];\r\n  for (let slice = 0; slice < rows + cols - 1; ++slice) {\r\n    let z1 = slice < cols ? 0 : slice - cols + 1;\r\n    let z2 = slice < rows ? 0 : slice - rows + 1;\r\n    group = [];\r\n    for (let j = slice - z2; j >= z1; --j) {\r\n      group.push(squares[j][slice - j]);\r\n    }\r\n    out.push(group);\r\n  }\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === diagonalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n  if (getEmptySquares(squares).length === 0) {\r\n    return DRAW;\r\n  }\r\n  return null;\r\n}\r\nexport const getEmptySquares = (grid) => {\r\n  let emptySquares = [];\r\n  grid.forEach((row, i) => {\r\n    row.forEach((ele, j) => {\r\n      if (ele === null) {\r\n        emptySquares = [...emptySquares, [i, j]];\r\n      }\r\n    });\r\n  });\r\n  return emptySquares;\r\n};\r\nexport const isEmpty = (grid) => {\r\n  return getEmptySquares(grid).length === 0;\r\n};\r\nexport const getRandomInt = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\nexport const switchPlayer = (player) => {\r\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n};\r\nexport const cloneGrid = (grid) => {\r\n  return grid.map((arr) => arr.slice());\r\n};\r\nexport const makeMove = (grid, square, player) => {\r\n  const [row, col] = square;\r\n  if (grid[row][col] === null) {\r\n    grid[row][col] = player;\r\n  }\r\n};\r\n","import { SCORES } from \"./constants\";\r\nimport {\r\n  switchPlayer,\r\n  calculateWinner,\r\n  getEmptySquares,\r\n  cloneGrid,\r\n  makeMove,\r\n} from \"./helpers\";\r\n\r\nexport const minimax = (board, player) => {\r\n  const mult = SCORES[player];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n  const winner = calculateWinner(board);\r\n  if (winner !== null) {\r\n    return [SCORES[winner], 0];\r\n  } else {\r\n    for (let empty of getEmptySquares(board)) {\r\n      let copy = cloneGrid(board);\r\n\r\n      // Pass in empty square\r\n      makeMove(copy, empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};\r\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport {\n  GAME_STATES,\n  PLAYER_X,\n  PLAYER_O,\n  DRAW,\n  DIMS_LENGTH,\n  DIMS_WIDTH,\n  GAME_MODES,\n  marks,\n  minSize,\n  maxSize,\n} from \"../constants\";\nimport {\n  switchPlayer,\n  getRandomInt,\n  calculateWinner,\n  cloneGrid,\n  isEmpty,\n  getEmptySquares,\n} from \"../helpers\";\nimport { Button, Box, Select } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { minimax } from \"../minimax\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Slider from \"@material-ui/core/Slider\";\n\nconst arr = Array(DIMS_LENGTH)\n  .fill(null)\n  .map(() => new Array(DIMS_WIDTH).fill(null));\n\nconst Game = () => {\n  const [players, setPlayers] = useState({ human: null, computer: null });\n  const [stepNumber, setStepNumber] = useState(0);\n  const [nextMove, setNextMove] = useState(null);\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n  const [winner, setWinner] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [mode, setMode] = useState(GAME_MODES.medium);\n  const [length, setLength] = useState(DIMS_LENGTH);\n  const [width, setWidth] = useState(DIMS_WIDTH);\n  const [grid, setGrid] = useState([\n    Array(length)\n      .fill(null)\n      .map(() => new Array(width).fill(null)),\n  ]);\n\n  const classes = useStyles();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const choosePlayer = (option) => {\n    setPlayers({ human: option, computer: switchPlayer(option) });\n    setGrid([\n      Array(length)\n        .fill(null)\n        .map(() => new Array(width).fill(null)),\n    ]);\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  };\n  const setLengthOfBoard = (event, value) => {\n    setLength(value);\n  };\n  const setWidthOfBoard = (event, value) => {\n    setWidth(value);\n  };\n\n  /**\n   * Does a deep copy of the current grid and inserts the\n   * index of the grid with the proper player char\n   * @param {integer} row - Row index of the 2D array\n   * @param {integer} col - Column index of the 2D array\n   * @param {integer} player - the player character\n   *\n   *\n   *\n   *\n   */\n  const move = useCallback(\n    (row, col, player) => {\n      if (player && gameState === GAME_STATES.inProgress) {\n        const pastHistory = grid.slice(0, stepNumber + 1);\n        const currentSquares = pastHistory[stepNumber];\n        const squares = currentSquares.map((arr) => arr.slice());\n        squares[row][col] = player;\n        setGrid([...pastHistory, squares]);\n\n        setStepNumber(pastHistory.length);\n      }\n    },\n    [gameState, stepNumber, grid]\n  );\n  const startNewGame = () => {\n    setGameState(GAME_STATES.notStarted);\n    setGrid([arr]);\n    setLength(DIMS_LENGTH);\n    setWidth(DIMS_WIDTH);\n    setStepNumber(0);\n  };\n\n  const playerMove = (row, col) => {\n    if (!grid[stepNumber][row][col] && nextMove === players.human) {\n      move(row, col, players.human);\n      setNextMove(players.computer);\n    }\n  };\n\n  const computerMove = useCallback(() => {\n    const getIndexToMove = () => {\n      let row = getRandomInt(0, grid[stepNumber].length - 1);\n      let col = getRandomInt(0, grid[stepNumber][0].length - 1);\n      while (grid[stepNumber][row][col]) {\n        row = getRandomInt(0, grid[stepNumber].length - 1);\n        col = getRandomInt(0, grid[stepNumber][0].length - 1);\n      }\n      return [row, col];\n    };\n    const gridCopy = cloneGrid(grid[stepNumber]);\n    const empty = isEmpty(grid[stepNumber]);\n    let row = 0;\n    let col = 0;\n    let index = null;\n    switch (mode) {\n      case GAME_MODES.easy:\n        [row, col] = getIndexToMove();\n        break;\n      case GAME_MODES.medium:\n        const smartMove = !isEmpty(grid[stepNumber]) && Math.random() < 0.5;\n        if (smartMove) {\n          if (grid[stepNumber].length <= 3 && grid[stepNumber][0].length <= 3) {\n            index = minimax(gridCopy, players.computer)[1];\n          } else {\n            [row, col] = getIndexToMove();\n          }\n        } else {\n          [row, col] = getIndexToMove();\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        if (grid[stepNumber].length <= 3 && grid[stepNumber][0].length <= 3) {\n          index = empty\n            ? [\n                getRandomInt(0, grid[stepNumber].length - 1),\n                getRandomInt(0, grid[stepNumber][0].length - 1),\n              ]\n            : minimax(gridCopy, players.computer)[1];\n        } else {\n          if (getEmptySquares(grid[stepNumber]).length <= 5) {\n            index = minimax(gridCopy, players.computer)[1];\n          } else {\n            index = getIndexToMove();\n          }\n        }\n    }\n    if (index) {\n      [row, col] = index;\n    }\n    if (!grid[stepNumber][row][col]) {\n      move(row, col, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, grid, players, stepNumber, mode]);\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n  };\n  const renderMoves = () =>\n    grid.map((_step, move) => {\n      const destination = move ? `Go to move #${move}` : \"Go to start\";\n      return (\n        <li key={move}>\n          <Button {...buttonStyle} onClick={() => jumpTo(move)}>\n            {destination}\n          </Button>\n        </li>\n      );\n    });\n  const changeMode = (e) => {\n    setMode(e.target.value);\n  };\n\n  useEffect(() => {\n    let timeout;\n    if (\n      nextMove !== null &&\n      nextMove === players.computer &&\n      gameState !== GAME_STATES.over\n    ) {\n      // Delay the computer's movement to prevent instantaneous movement\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n\n  useEffect(() => {\n    const winner = calculateWinner(grid[stepNumber]);\n    const declareWinner = (winner) => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins!\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins!\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a draw\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n    };\n\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove, stepNumber]);\n\n  function valuetext(value) {\n    // console.log(value);\n    return `${value}`;\n  }\n\n  switch (gameState) {\n    case GAME_STATES.notStarted:\n    default:\n      return (\n        <Box display=\"flex\" justifyContent=\"center\" m={5} p={5}>\n          <div>\n            <Typography gutterBottom=\"true\">Choose your player</Typography>\n            <Button {...buttonStyle} onClick={() => choosePlayer(PLAYER_X)}>\n              X\n            </Button>\n            <Box p={1} m={1}>\n              <Typography gutterBottom=\"true\">Or</Typography>\n            </Box>\n            <Button {...buttonStyle} onClick={() => choosePlayer(PLAYER_O)}>\n              O\n            </Button>\n            <hr />\n            <div>\n              <Typography gutterBottom=\"true\">Choose difficulty</Typography>\n              <Select onChange={changeMode} value={mode}>\n                {Object.keys(GAME_MODES).map((key) => {\n                  const gameMode = GAME_MODES[key];\n                  return (\n                    <option key={gameMode} value={gameMode}>\n                      {key}\n                    </option>\n                  );\n                })}\n              </Select>\n              <hr />\n            </div>\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              Length of Game Board In Squares\n            </Typography>\n            <Slider\n              defaultValue={3}\n              getAriaValueText={valuetext}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n              min={minSize}\n              max={maxSize}\n              onChangeCommitted={(event, value) =>\n                setLengthOfBoard(event, value)\n              }\n            />\n            <Typography id=\"discrete-slider-custom\" gutterBottom>\n              Width of Game Board In Squares\n            </Typography>\n            <Slider\n              defaultValue={3}\n              getAriaValueText={valuetext}\n              aria-labelledby=\"discrete-slider-custom\"\n              step={1}\n              valueLabelDisplay=\"auto\"\n              marks={marks}\n              min={minSize}\n              max={maxSize}\n              onChangeCommitted={(event, value) =>\n                setWidthOfBoard(event, value)\n              }\n            />\n          </div>\n        </Box>\n      );\n    case GAME_STATES.inProgress:\n      return (\n        <>\n          <Board squares={grid[stepNumber]} onClick={playerMove} />\n          <div>{renderMoves()}</div>\n        </>\n      );\n    case GAME_STATES.over:\n      return (\n        <div>\n          <Box display=\"flex\" justifyContent=\"center\" m={5} p={5}>\n          <Button {...buttonStyle} onClick={handleOpen}>\n            Result\n          </Button>\n          <Modal\n            aria-labelledby=\"title\"\n            aria-describedby=\"description\"\n            className={classes.modal}\n            open={open}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n          >\n            <Fade in={open}>\n              <div className={classes.paper}>\n                <h2 id=\"title\">{winner}</h2>\n                <p id=\"description\">Congratulations on finishing the game!</p>\n              </div>\n            </Fade>\n          </Modal>\n          <Button {...buttonStyle} onClick={startNewGame}>\n            Start over\n          </Button>\n          </Box>\n        </div>\n      );\n  }\n};\nexport default Game;\n\nconst buttonStyle = {\n  variant: \"contained\",\n  color: \"primary\",\n};\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n","import React from \"react\";\nimport Game from \"./components/Game\";\nconst App = () => <Game />;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}