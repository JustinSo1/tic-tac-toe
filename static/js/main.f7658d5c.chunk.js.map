{"version":3,"sources":["constants.js","components/Square.js","components/Board.js","helpers.js","minimax.js","components/Game.js","App.js","index.js"],"names":["DIMS_WIDTH","Math","floor","random","DIMS_LENGTH","GAME_STATES","SCORES","1","0","2","GAME_MODES","easy","medium","difficult","defaultProps","color","p","borderColor","width","height","fontSize","textAlign","Square","value","onClick","borderTop","borderBottom","borderRight","borderLeft","Box","Board","squares","map","row","i","display","justifyContent","key","col","j","activeSquare","length","calculateWinner","horizontalCheck","verticalCheck","out","group","push","every","element","index","arr","rows","cols","diagonalCheck","min","slice","z1","getEmptySquares","grid","emptySquares","forEach","ele","isEmpty","getRandomInt","max","ceil","switchPlayer","player","cloneGrid","makeMove","square","minimax","board","thisScore","mult","maxScore","bestMove","winner","empty","copy","Array","fill","Game","useState","setGrid","human","computer","players","setPlayers","stepNumber","setStepNumber","nextMove","setNextMove","gameState","setGameState","setWinner","open","setOpen","mode","setMode","classes","useStyles","choosePlayer","option","move","useCallback","pastHistory","computerMove","gridCopy","useEffect","timeout","setTimeout","clearTimeout","winnerStr","declareWinner","Button","buttonStyle","onChange","e","target","Object","keys","gameMode","_step","destination","Modal","aria-labelledby","aria-describedby","className","modal","onClose","closeAfterTransition","BackdropComponent","Backdrop","BackdropProps","Fade","in","paper","id","variant","makeStyles","theme","alignItems","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7658d5c.chunk.js","sourcesContent":["export const SQUARE_DIMS = 100;\r\nexport const DIMS_WIDTH = Math.floor(Math.random() * 5) + 2;\r\nexport const DIMS_LENGTH = Math.floor(Math.random() * 5) + 2;\r\n// export const DIMS_WIDTH = 3;\r\n// export const DIMS_LENGTH = 3;\r\n\r\nexport const DRAW = 0;\r\nexport const PLAYER_X = 1;\r\nexport const PLAYER_O = 2;\r\nexport const GAME_STATES = {\r\n  notStarted: \"not_started\",\r\n  inProgress: \"in_progress\",\r\n  over: \"over\",\r\n};\r\nexport const SCORES = {\r\n  1: 1,\r\n  0: 0,\r\n  2: -1,\r\n};\r\nexport const GAME_MODES = {\r\n  easy: \"easy\",\r\n  medium: \"medium\",\r\n  difficult: \"difficult\",\r\n};\r\n","import React from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { SQUARE_DIMS } from \"../constants\";\r\n\r\nconst defaultProps = {\r\n  color: \"black\",\r\n  p: 1,\r\n  borderColor: \"primary\",\r\n  width: SQUARE_DIMS,\r\n  height: SQUARE_DIMS,\r\n  fontSize: SQUARE_DIMS,\r\n  textAlign: \"center\",\r\n};\r\n\r\nconst Square = ({\r\n  value,\r\n  onClick,\r\n  borderTop,\r\n  borderBottom,\r\n  borderRight,\r\n  borderLeft,\r\n}) => (\r\n  <Box\r\n    {...defaultProps}\r\n    onClick={onClick}\r\n    borderTop={borderTop}\r\n    borderBottom={borderBottom}\r\n    borderLeft={borderLeft}\r\n    borderRight={borderRight}\r\n  >\r\n    {value}\r\n  </Box>\r\n);\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Square\";\r\nimport { Box } from \"@material-ui/core\";\r\nimport { PLAYER_X } from \"../constants\";\r\nconst Board = ({ squares, onClick }) => {\r\n\r\n  return (\r\n    <div>\r\n      {squares.map((row, i) => {\r\n        return (\r\n          <Box display=\"flex\" justifyContent=\"center\" key={i}>\r\n            {row.map((col, j) => {\r\n              let borderTop;\r\n              let borderLeft;\r\n              let borderBottom;\r\n              let borderRight;\r\n              const activeSquare = col !== null;\r\n              if (i === 0) {\r\n                borderBottom = 1;\r\n                if (j === 0 || j !== row.length - 1) {\r\n                  borderRight = 1;\r\n                }\r\n              } else if (i === squares.length - 1) {\r\n                if (j === 0 || j !== row.length - 1) {\r\n                  borderRight = 1;\r\n                }\r\n              } else {\r\n                borderRight = 1;\r\n                borderBottom = 1;\r\n                if (j === row.length - 1) {\r\n                  borderRight = 0;\r\n                }\r\n              }\r\n              return (\r\n                <Square\r\n                  value={activeSquare && (col === PLAYER_X ? \"X\" : \"O\")}\r\n                  borderLeft={borderLeft}\r\n                  borderBottom={borderBottom}\r\n                  borderTop={borderTop}\r\n                  borderRight={borderRight}\r\n                  key={(i, j)}\r\n                  onClick={() => onClick(i, j)}\r\n                />\r\n              );\r\n            })}\r\n          </Box>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { PLAYER_O, PLAYER_X, DRAW } from \"./constants\";\r\nexport function calculateWinner(squares) {\r\n  let horizontalCheck = squares[0].length;\r\n  let verticalCheck = squares.length;\r\n\r\n  // Horizontal check\r\n  let out = [];\r\n  let group = [];\r\n  for (let row = 0; row < squares.length; ++row) {\r\n    group = [];\r\n    for (let col = 0; col < squares[0].length; ++col) {\r\n      group.push(squares[row][col]);\r\n    }\r\n    out.push(group);\r\n  }\r\n\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === horizontalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Vertical Check\r\n  out = [];\r\n  for (let col = 0; col < squares[0].length; ++col) {\r\n    group = [];\r\n    for (let row = 0; row < squares.length; ++row) {\r\n      group.push(squares[row][col]);\r\n    }\r\n    out.push(group);\r\n  }\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === verticalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Diagonal Check\r\n  // # of rows\r\n  let rows = squares.length;\r\n  // # of cols\r\n  let cols = squares[0].length;\r\n\r\n  let diagonalCheck = Math.min(rows, cols);\r\n\r\n  out = [];\r\n  for (let i = 1 - rows; i < cols; i++) {\r\n    group = [];\r\n    for (let j = 0; j < rows; j++) {\r\n      if (i + j >= 0 && i + j < cols) {\r\n        group.push(squares[j][i + j]);\r\n      }\r\n    }\r\n    out.push(group);\r\n  }\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === diagonalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n\r\n  // Reverse Diagonal check\r\n  rows = squares.length;\r\n  cols = squares[0].length;\r\n  out = [];\r\n  for (let slice = 0; slice < rows + cols - 1; ++slice) {\r\n    let z1 = slice < cols ? 0 : slice - cols + 1;\r\n    let z2 = slice < rows ? 0 : slice - rows + 1;\r\n    group = [];\r\n    for (let j = slice - z2; j >= z1; --j) {\r\n      group.push(squares[j][slice - j]);\r\n    }\r\n    out.push(group);\r\n  }\r\n  for (let i = 0; i < out.length; ++i) {\r\n    if (out[i].length === diagonalCheck) {\r\n      if (\r\n        out[i].every((element, index, arr) => element && element === arr[0])\r\n      ) {\r\n        return out[i][0];\r\n      }\r\n    }\r\n  }\r\n  if (getEmptySquares(squares).length === 0) {\r\n    return DRAW;\r\n  }\r\n  return null;\r\n}\r\nexport const getEmptySquares = (grid) => {\r\n  let emptySquares = [];\r\n  grid.forEach((row, i) => {\r\n    row.forEach((ele, j) => {\r\n      if (ele === null) {\r\n        emptySquares = [...emptySquares, [i, j]];\r\n      }\r\n    });\r\n  });\r\n  return emptySquares;\r\n};\r\nexport const isEmpty = (grid) => {\r\n  return getEmptySquares(grid).length === 0;\r\n};\r\nexport const getRandomInt = (min, max) => {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n};\r\nexport const switchPlayer = (player) => {\r\n  return player === PLAYER_X ? PLAYER_O : PLAYER_X;\r\n};\r\nexport const cloneGrid = (grid) => {\r\n  return grid.map((arr) => arr.slice());\r\n};\r\nexport const makeMove = (grid, square, player) => {\r\n  const [row, col] = square;\r\n  if (grid[row][col] === null) {\r\n    grid[row][col] = player;\r\n  }\r\n};\r\n","import { SCORES } from \"./constants\";\r\nimport {\r\n  switchPlayer,\r\n  calculateWinner,\r\n  getEmptySquares,\r\n  cloneGrid,\r\n  makeMove,\r\n} from \"./helpers\";\r\n\r\nexport const minimax = (board, player) => {\r\n  const mult = SCORES[player];\r\n  let thisScore;\r\n  let maxScore = -1;\r\n  let bestMove = null;\r\n  const winner = calculateWinner(board);\r\n  if (winner !== null) {\r\n    return [SCORES[winner], 0];\r\n  } else {\r\n    for (let empty of getEmptySquares(board)) {\r\n      let copy = cloneGrid(board);\r\n\r\n      makeMove(copy, empty, player);\r\n      thisScore = mult * minimax(copy, switchPlayer(player))[0];\r\n\r\n      if (thisScore >= maxScore) {\r\n        maxScore = thisScore;\r\n        bestMove = empty;\r\n      }\r\n    }\r\n\r\n    return [mult * maxScore, bestMove];\r\n  }\r\n};\r\n","import React, { useState, useCallback, useEffect } from \"react\";\nimport Board from \"./Board\";\nimport {\n  GAME_STATES,\n  PLAYER_X,\n  PLAYER_O,\n  DRAW,\n  DIMS_LENGTH,\n  DIMS_WIDTH,\n  GAME_MODES,\n} from \"../constants\";\nimport {\n  switchPlayer,\n  getRandomInt,\n  calculateWinner,\n  cloneGrid,\n  isEmpty,\n  getEmptySquares,\n} from \"../helpers\";\nimport { Button, Box } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport { minimax } from \"../minimax\";\n\nconst arr = Array(DIMS_LENGTH)\n  .fill(null)\n  .map(() => new Array(DIMS_WIDTH).fill(null));\n\nconst Game = () => {\n  const [grid, setGrid] = useState([arr]);\n  const [players, setPlayers] = useState({ human: null, computer: null });\n  const [stepNumber, setStepNumber] = useState(0);\n  const [nextMove, setNextMove] = useState(null);\n  const [gameState, setGameState] = useState(GAME_STATES.notStarted);\n  const [winner, setWinner] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [mode, setMode] = useState(GAME_MODES.medium);\n\n  const classes = useStyles();\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const choosePlayer = (option) => {\n    setPlayers({ human: option, computer: switchPlayer(option) });\n    setGameState(GAME_STATES.inProgress);\n    setNextMove(PLAYER_X);\n  };\n  const move = useCallback(\n    (row, col, player) => {\n      if (player && gameState === GAME_STATES.inProgress) {\n        const pastHistory = grid.slice(0, stepNumber + 1);\n        const currentSquares = pastHistory[stepNumber];\n        const squares = currentSquares.map((arr) => arr.slice());\n        squares[row][col] = player;\n        setGrid([...pastHistory, squares]);\n\n        setStepNumber(pastHistory.length);\n      }\n    },\n    [gameState, stepNumber, grid]\n  );\n  const startNewGame = () => {\n    setGameState(GAME_STATES.notStarted);\n    setGrid([arr]);\n    setStepNumber(0);\n  };\n\n  const playerMove = (row, col) => {\n    if (!grid[stepNumber][row][col] && nextMove === players.human) {\n      move(row, col, players.human);\n      setNextMove(players.computer);\n    }\n  };\n\n  const computerMove = useCallback(() => {\n    const gridCopy = cloneGrid(grid[stepNumber]);\n    const empty = isEmpty(grid[stepNumber]);\n    let row = 0;\n    let col = 0;\n    let index = null;\n    switch (mode) {\n      case GAME_MODES.easy:\n        row = getRandomInt(0, DIMS_LENGTH - 1);\n        col = getRandomInt(0, DIMS_WIDTH - 1);\n        while (grid[stepNumber][row][col]) {\n          row = getRandomInt(0, DIMS_LENGTH - 1);\n          col = getRandomInt(0, DIMS_WIDTH - 1);\n        }\n        break;\n      case GAME_MODES.medium:\n        const smartMove = !isEmpty(grid[stepNumber]) && Math.random() < 0.5;\n        if (smartMove) {\n          if (DIMS_LENGTH <= 3 && DIMS_WIDTH <= 3) {\n            index = minimax(gridCopy, players.computer)[1];\n          } else {\n            row = getRandomInt(0, DIMS_LENGTH - 1);\n            col = getRandomInt(0, DIMS_WIDTH - 1);\n            while (grid[stepNumber][row][col]) {\n              row = getRandomInt(0, DIMS_LENGTH - 1);\n              col = getRandomInt(0, DIMS_WIDTH - 1);\n            }\n          }\n        } else {\n          row = getRandomInt(0, DIMS_LENGTH - 1);\n          col = getRandomInt(0, DIMS_WIDTH - 1);\n          while (grid[stepNumber][row][col]) {\n            row = getRandomInt(0, DIMS_LENGTH - 1);\n            col = getRandomInt(0, DIMS_WIDTH - 1);\n          }\n        }\n        break;\n      case GAME_MODES.difficult:\n      default:\n        if (DIMS_LENGTH <= 3 && DIMS_WIDTH <= 3) {\n          index = empty\n            ? [\n                getRandomInt(0, DIMS_LENGTH - 1),\n                getRandomInt(0, DIMS_WIDTH - 1),\n              ]\n            : minimax(gridCopy, players.computer)[1];\n        } else {\n          if (getEmptySquares(grid[stepNumber]) <= 5) {\n            index = minimax(gridCopy, players.computer)[1];\n          } else {\n            index = [\n              getRandomInt(0, DIMS_LENGTH - 1),\n              getRandomInt(0, DIMS_WIDTH - 1),\n            ];\n          }\n        }\n    }\n    if (index) {\n      [row, col] = index;\n    }\n    if (!grid[stepNumber][row][col]) {\n      move(row, col, players.computer);\n      setNextMove(players.human);\n    }\n  }, [move, grid, players, stepNumber]);\n\n  const jumpTo = (step) => {\n    setStepNumber(step);\n  };\n  const renderMoves = () =>\n    grid.map((_step, move) => {\n      const destination = move ? `Go to move #${move}` : \"Go to start\";\n      return (\n        <li key={move}>\n          <Button {...buttonStyle} onClick={() => jumpTo(move)}>\n            {destination}\n          </Button>\n        </li>\n      );\n    });\n  const changeMode = (e) => {\n    setMode(e.target.value);\n  };\n\n  useEffect(() => {\n    let timeout;\n    if (\n      nextMove !== null &&\n      nextMove === players.computer &&\n      gameState !== GAME_STATES.over\n    ) {\n      // Delay the computer's movement to prevent instantaneous movement\n      timeout = setTimeout(() => {\n        computerMove();\n      }, 500);\n    }\n    return () => timeout && clearTimeout(timeout);\n  }, [nextMove, computerMove, players.computer, gameState]);\n\n  useEffect(() => {\n    const winner = calculateWinner(grid[stepNumber]);\n    const declareWinner = (winner) => {\n      let winnerStr;\n      switch (winner) {\n        case PLAYER_X:\n          winnerStr = \"Player X wins!\";\n          break;\n        case PLAYER_O:\n          winnerStr = \"Player O wins!\";\n          break;\n        case DRAW:\n        default:\n          winnerStr = \"It's a draw\";\n      }\n      setGameState(GAME_STATES.over);\n      setWinner(winnerStr);\n    };\n\n    if (winner !== null && gameState !== GAME_STATES.over) {\n      declareWinner(winner);\n    }\n  }, [gameState, grid, nextMove, stepNumber]);\n\n  switch (gameState) {\n    case GAME_STATES.notStarted:\n    default:\n      return (\n        <div>\n          <p>Choose your Player</p>\n          <Button {...buttonStyle} onClick={() => choosePlayer(PLAYER_X)}>\n            X\n          </Button>\n          <div>\n            <p>or</p>\n          </div>\n          <Button {...buttonStyle} onClick={() => choosePlayer(PLAYER_O)}>\n            O\n          </Button>\n          <p>Choose difficulty</p>\n          <select onChange={changeMode} value={mode}>\n            {Object.keys(GAME_MODES).map((key) => {\n              const gameMode = GAME_MODES[key];\n              return (\n                <option key={gameMode} value={gameMode}>\n                  {key}\n                </option>\n              );\n            })}\n          </select>\n        </div>\n      );\n    case GAME_STATES.inProgress:\n      return (\n        <>\n          <Board squares={grid[stepNumber]} onClick={playerMove} />\n          <div>{renderMoves()}</div>\n        </>\n      );\n    case GAME_STATES.over:\n      return (\n        <div>\n          <Button {...buttonStyle} onClick={handleOpen}>\n            Result\n          </Button>\n          <Modal\n            aria-labelledby=\"title\"\n            aria-describedby=\"description\"\n            className={classes.modal}\n            open={open}\n            onClose={handleClose}\n            closeAfterTransition\n            BackdropComponent={Backdrop}\n            BackdropProps={{\n              timeout: 500,\n            }}\n          >\n            <Fade in={open}>\n              <div className={classes.paper}>\n                <h2 id=\"title\">{winner}</h2>\n                <p id=\"description\">Congratulations on finishing the game!</p>\n              </div>\n            </Fade>\n          </Modal>\n          <Button {...buttonStyle} onClick={startNewGame}>\n            Start over\n          </Button>\n        </div>\n      );\n  }\n};\nexport default Game;\n\nconst buttonStyle = {\n  variant: \"contained\",\n  color: \"primary\",\n};\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n","import React from \"react\";\nimport Game from \"./components/Game\";\nconst App = () => <Game />;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}